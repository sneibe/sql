/*
This script creates and populates three tables: sale, item, lineitem.
*/


DROP TABLE item CASCADE CONSTRAINTS;
DROP TABLE lineitem CASCADE CONSTRAINTS;
DROP TABLE sale CASCADE CONSTRAINTS;


CREATE TABLE sale (
  saleno NUMBER (5),
  saledate DATE,
  saletext VARCHAR2(50),
CONSTRAINT sale_saleno_pk PRIMARY KEY (saleno));

CREATE TABLE item (
  itemno NUMBER (5),
  itemname VARCHAR2(30),
  itemtype CHAR(1),
  itemcolor VARCHAR2(10),
CONSTRAINT item_itemno_pk PRIMARY KEY (itemno));





CREATE TABLE lineitem (
  lineno NUMBER (5),
  lineqty NUMBER (4),
  lineprice NUMBER (7,2),
  saleno NUMBER (5),
  itemno NUMBER (5),
CONSTRAINT lineitem_linesale_pk PRIMARY KEY (lineno, saleno),
CONSTRAINT lineitem_saleno_fk FOREIGN KEY (saleno) REFERENCES sale 
(saleno),
CONSTRAINT lineitem_itemno_fk FOREIGN KEY (itemno) REFERENCES item 
(itemno));


/*--UNFORMATTED DATE TO PRODUCE ERROR MESSAGE

INSERT INTO sale VALUES (1,'2003-01-15','Scruffy Australian - called 
himself Bruce');
INSERT INTO sale VALUES (2,'2003-01-15','Man. Rather fond of hats.');
INSERT INTO sale VALUES (3,'2003-01-15','Woman. Planning to row Atlantic 
- lengthwise!');
INSERT INTO sale VALUES (4,'2003-01-15','Man. Trip to New York - thinks 
NY is a jungle!');
INSERT INTO sale VALUES (5,'2003-01-16','Expedition leader for African 
safari.');

*/


--Using the default DATE value format for Oracle
INSERT INTO sale VALUES (1,'15-JAN-2003','Scruffy Australian - called 
himself Bruce');
INSERT INTO sale VALUES (2,'15-JAN-2003','Man. Rather fond of hats.');
INSERT INTO sale VALUES (3,'15-JAN-2003','Woman. Planning to row 
Atlantic - lengthwise!');
INSERT INTO sale VALUES (4,'15-JAN-2003','Man. Trip to New York - thinks 
NY is a jungle!');
INSERT INTO sale VALUES (5,'16-JAN-2003','Expedition leader for African 
safari.');



/*
--FORMATTED DATE
INSERT INTO sale VALUES (1, TO_DATE('2003-01-15', 'YYYY-MM-DD'),'Scruffy 
Australian - called himself Bruce');
INSERT INTO sale VALUES (2, TO_DATE ('2003-01-15', 'YYYY-MM-DD'), 'Man. 
Rather fond of hats.');
INSERT INTO sale VALUES (3, TO_DATE ('2003-01-15', 'YYYY-MM-DD'), 
'Woman. Planning to row Atlantic - lengthwise!');
INSERT INTO sale VALUES (4, TO_DATE ('2003-01-15', 'YYYY-MM-DD'), 'Man. 
Trip to New York - thinks NY is a jungle!');
INSERT INTO sale VALUES (5, TO_DATE ('2003-01-16', 'YYYY-MM-DD'), 
'Expedition leader for African safari.');
*/


INSERT INTO item VALUES (1,'Pocket knife - Nile','E','Brown');
INSERT INTO item VALUES (2,'Pocket knife - Avon','E','Brown');
INSERT INTO item VALUES (3,'Compass','N','-');
INSERT INTO item VALUES (4,'Geo positioning system','N','-');
INSERT INTO item VALUES (5,'Map measure','N','-');
INSERT INTO item VALUES (6,'Hat - Polar explorer','C','Red');
INSERT INTO item VALUES (7,'Hat - Polar explorer','C','White');
INSERT INTO item VALUES (8,'Boots - snake proof','C','Green');
INSERT INTO item VALUES (9,'Boots - snake proof','C','Black');
INSERT INTO item VALUES (10,'Safari chair','F','Khaki');
INSERT INTO item VALUES (11,'Hammock','F','Khaki');
INSERT INTO item VALUES (12,'Tent - 8 person','F','Khaki');
INSERT INTO item VALUES (13,'Tent - 2 person','F','Khaki');
INSERT INTO item VALUES (14,'Safari cooking kit','E','-');
INSERT INTO item VALUES (15,'Pith helmet','C','Khaki');
INSERT INTO item VALUES (16,'Pith helmet','C','White');
INSERT INTO item VALUES (17,'Map case','N','Brown');
INSERT INTO item VALUES (18,'Sextant','N','-');
INSERT INTO item VALUES (19,'Stetson','C','Black');
INSERT INTO item VALUES (20,'Stetson','C','Brown');




INSERT INTO lineitem VALUES (1,1,4.5,1,2);
INSERT INTO lineitem VALUES (3,1,25,1,20);
INSERT INTO lineitem VALUES (1,1,25,2,6);
INSERT INTO lineitem VALUES (2,1,20,2,16);
INSERT INTO lineitem VALUES (3,1,25,2,19);
INSERT INTO lineitem VALUES (4,1,2.25,2,2);
INSERT INTO lineitem VALUES (1,1,500,3,4);
INSERT INTO lineitem VALUES (2,1,2.25,3,2);
INSERT INTO lineitem VALUES (1,1,500,4,4);
INSERT INTO lineitem VALUES (2,1,65,4,9);
INSERT INTO lineitem VALUES (3,1,60,4,13);
INSERT INTO lineitem VALUES (4,1,75,4,14);
INSERT INTO lineitem VALUES (5,1,10,4,3);
INSERT INTO lineitem VALUES (6,1,2.25,4,2);
INSERT INTO lineitem VALUES (1,50,36,5,10);
INSERT INTO lineitem VALUES (2,50,40.5,5,11);
INSERT INTO lineitem VALUES (3,8,153,5,12);
INSERT INTO lineitem VALUES (4,1,60,5,13);
INSERT INTO lineitem VALUES (5,1,0,5,2);

COMMIT;

---------------------------------

--SELECT STATEMENTS


SELECT * FROM sale;
SELECT * FROM item;
SELECT * FROM lineitem;

--What is the total value of Sale #5? 
--List both the sale number and the total of the sale.
SELECT saleno,SUM(lineqty*lineprice) AS Total_Sale FROM
sale INNER JOIN lineitem
USING (saleno)
Where saleno = '5'
group by saleno; 

--Who made the largest purchase? How much was it?
SELECT saletext AS "Sale Text", TO_CHAR(SUM(lineqty*lineprice),'$999,999,999') AS "Total Sale" 
FROM sale inner join linetiem 
using (saleno)
GROUP BY saleno
HAVING SUM(lineqty*lineprice) = ( 
    SELECT MAX (SUM(lineqty*lineprice)) FROM sale INNER JOIN lineitem 
    USING (saleno)
GROUP BY saleno);

--Give me the description of the person or people who purchased a Stetson hat.
SELECT saletext FROM sale, lineitem,item 
WHERE sale.saleno = lineitem.saleno 
AND lineitem.itemno = item.itemno
AND UPPER (itemname) LIKE UPPER ('%stetson%');

--SAME but with inner join
SELECT saletext FROM sale INNER JOIN lineitem USING (saleno) INNER JOIN item USING (itemno)
WHERE UPPER (itemname) LIKE UPPER ('%stetson%');

--Give me the description of the person or people who purchased a black Stetson hat.
SELECT saletext FROM sale, lineitem,item 
WHERE sale.saleno = lineitem.saleno 
AND lineitem.itemno = item.itemno
AND UPPER (itemname) LIKE UPPER ('%stetson%')
AND itemcolor ='Black';


--Who made the largest purchase? How much was it?
SELECT saletext AS "Sale Text", TO_CHAR(SUM(lineqty*lineprice),'$999,999,999') AS "Total Sale"  
FROM sale INNER JOIN lineitem
using (saleno)
GROUP BY saletext
HAVING SUM(lineqty*lineprice) = ( 
    SELECT MAX (SUM(lineqty*lineprice)) FROM lineitem 
GROUP BY saleno);

--Give me the date, sale number, total sale value, and customer description of
--every sale that exceeded the average value of sales. Sort by sales total.

SELECT saledate,saleno,SUM(lineqty*lineprice) AS "Total Sale", saletext
FROM sale INNER JOIN lineitem USING (saleno)
GROUP BY saledate,saleno,saletext
HAVING SUM(lineqty*lineprice) > (
SELECT AVG(lineqty*lineprice) from lineitem);

--Which items are included in sales with over 3 items per sale? 
--Don't duplicate the item names. Sort by name.
-- = sign doesnt work because the equal sign logically says: The sale number HAS to equala specific value. 
--IN is used for range 
--DISTINCT is put in outer query, since there would be repeat and it allows a single function. 
SELECT DISTINCT itemname FROM item INNER JOIN lineitem USING (itemno)
WHERE saleno IN (
SELECT saleno FROM lineitem
HAVING COUNT(itemno) > 3 
GROUP BY saleno)
ORDER BY itemname;
